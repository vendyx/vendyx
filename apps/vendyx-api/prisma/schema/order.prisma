enum OrderState {
  /// The order is being modified by the customer (CRUD line actions, adding contact info and shipment info)
  MODIFYING
  /// The order is ready to be paid
  PAYMENT_ADDED
  /// The payment has been authorized by the payment provider
  PAYMENT_AUTHORIZED
  /// The order has been shipped (carrier and tracking code added)
  SHIPPED
  /// The order has been delivered and is completes
  DELIVERED
  /// The order has been canceled by the admin
  CANCELED
}

model Order {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  /// The order code is a unique identifier for the order
  code            Int        @unique @default(autoincrement())
  /// The current state of the order
  state           OrderState @default(MODIFYING)
  /// The price that will be sent to the payment provider. subtotal plus shipping price
  total           Int        @default(0)
  /// Order lines total less discounts
  subtotal        Int        @default(0)
  /// The date and time when a payment has been added to the order
  placedAt        DateTime?  @map("placed_at")
  /// Total quantity of all items in the order
  totalQuantity   Int        @default(0) @map("total_quantity") @db.SmallInt
  /// Shipping address where this order will be shipped
  shippingAddress Json?      @map("shipping_address")
  /// Discounts applied to the order
  discounts       Json?

  lines OrderLine[]

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id") @db.Uuid
  payment    Payment?  @relation(fields: [paymentId], references: [id])
  paymentId  String?   @map("payment_id") @db.Uuid
  shipment   Shipment? @relation(fields: [shipmentId], references: [id])
  shipmentId String?   @map("shipment_id") @db.Uuid

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @default(dbgenerated("(current_setting('app.current_shop_id'::text))::uuid")) @map("shop_id") @db.Uuid

  @@map("orders")
}

model OrderLine {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  /// The price of the variant at the time of adding the line
  unitPrice    Int @default(0) @map("unit_price")
  /// The quantity of the variant in the line
  quantity     Int @default(0) @db.SmallInt
  /// The price of the line (unitPrice * quantity) before discounts
  lineSubtotal Int @default(0) @map("line_subtotal")
  /// The price of the line after discounts
  lineTotal    Int @default(0) @map("line_total")

  order            Order   @relation(fields: [orderId], references: [id])
  orderId          String  @map("order_id") @db.Uuid
  productVariant   Variant @relation(fields: [productVariantId], references: [id])
  productVariantId String  @map("product_variant_id") @db.Uuid

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @default(dbgenerated("(current_setting('app.current_shop_id'::text))::uuid")) @map("shop_id") @db.Uuid

  @@map("order_line")
}
