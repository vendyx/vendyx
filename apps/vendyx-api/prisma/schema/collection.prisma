enum CollectionContentType {
  PRODUCTS
  COLLECTIONS
}

/// A collection is a group of products that are displayed together in the storefront.
model Collection {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  /// The collection's name
  name        String
  /// The collection's slug used in the URL
  slug        String                @unique
  /// The collection's description
  description String?
  /// The collection's order user to decide to show the collection in the storefront
  enabled     Boolean               @default(true)
  /// The collection's content type indicating if the collection contains products or other collections
  contentType CollectionContentType @default(PRODUCTS) @map("content_type")

  parentId       String?      @map("parent_id") @db.Uuid
  parent         Collection?  @relation("CollectionToCollection", fields: [parentId], references: [id])
  subCollections Collection[] @relation("CollectionToCollection")

  assets   CollectionAsset[]
  products ProductCollection[]

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @default(dbgenerated("(current_setting('app.current_shop_id'::text))::uuid")) @map("shop_id") @db.Uuid

  @@map("collection")
}
