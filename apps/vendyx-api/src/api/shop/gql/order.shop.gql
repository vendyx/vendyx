type Mutation {
  createOrder(input: CreateOrderInput!): OrderResult!
  addLineToOrder(orderId: ID!, input: CreateOrderLineInput!): OrderResult!
  updateOrderLine(lineId: ID!, input: UpdateOrderLineInput!): OrderResult!
  removeOrderLine(lineId: ID!): OrderResult!
  addCustomerToOrder(orderId: ID!, input: AddCustomerToOrderInput!): OrderResult!
  addShippingAddressToOrder(orderId: ID!, input: CreateOrderAddressInput!): OrderResult!
  addShipmentToOrder(orderId: ID!, input: AddShipmentToOrderInput!): OrderResult!
  """
  Add a discount code to the order.
  """
  addDiscountCodeToOrder(orderId: ID!, code: String!): OrderResult!
  """
  Remove a discount code from the order.
  """
  removeDiscountCodeFromOrder(orderId: ID!, code: String!): OrderResult!
  """
  Re calculate the order discounts.
  This is useful when you need to show a most up to date order without the need to modify the order.
  (discounts only recalculate when order is mutated)
  """
  recalculateDiscounts(orderId: ID!): OrderResult!
  addPaymentToOrder(orderId: ID!, input: AddPaymentToOrderInput!): OrderResult!
}

type Query {
  """
  Get all available locations for pickup (for shipment type PICKUP)
  If input is not provided, it will return all available locations
  If input is provided, it will return the locations in the given country and province
  """
  availablePickupLocations(input: AvailablePickupLocationsInput): [Location!]!
  availableShippingMethods(orderId: ID!): [ShippingMethod!]!
  availablePaymentMethods: [PaymentMethod!]!
}

input CreateOrderInput {
  line: CreateOrderLineInput
}

input CreateOrderLineInput {
  productVariantId: ID!
  quantity: Int!
}

input UpdateOrderLineInput {
  quantity: Int!
}

input AddCustomerToOrderInput {
  firstName: String
  lastName: String!
  email: String!
  phoneNumber: String
}

input CreateOrderAddressInput {
  fullName: String!
  phoneNumber: String
  countryId: String!
  streetLine1: String!
  streetLine2: String
  city: String!
  province: String!
  postalCode: String!
  references: String
}

input AvailablePickupLocationsInput {
  country: String!
  province: String!
}

input AddPaymentToOrderInput {
  methodId: ID!
}

input AddShipmentToOrderInput {
  type: ShipmentType!
  """
  Refers to the shipping method ID when type is SHIPPING, and to the pickup location ID when type is PICKUP
  """
  providerId: ID!
}

" Results "
type OrderResult {
  order: Order
  apiErrors: [OrderErrorResult!]!
}

type OrderErrorResult {
  code: OrderErrorCode!
  message: String!
}

" Utils "
enum OrderErrorCode {
  NOT_ENOUGH_STOCK
  CUSTOMER_INVALID_EMAIL
  CUSTOMER_DISABLED
  MISSING_SHIPPING_ADDRESS
  SHIPPING_METHOD_NOT_FOUND
  LOCATION_NOT_FOUND
  FAILED_ADDING_SHIPPING_METHOD
  PAYMENT_METHOD_NOT_FOUND
  PAYMENT_DECLINED
  ORDER_TRANSITION_ERROR
  """
  Error thrown when trying to add a discount code to an order and the discount code provided
  | does not exist
  | is not enabled
  """
  INVALID_DISCOUNT_CODE
  """
  Error thrown when the discount code is not applicable to the order
  due to validation rules but the discount code itself is active
  """
  DISCOUNT_CODE_NOT_APPLICABLE
  """
  Payment failed due to an unexpected error in the payment handler
  """
  PAYMENT_FAILED
  FORBIDDEN_ORDER_ACTION
}
