enum DiscountApplicationMode {
  CODE
  AUTOMATIC
}

enum DiscountValueType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum DiscountType {
  ORDER
  PRODUCT
  SHIPPING
  BUY_X_GET_Y
}

enum OrderRequirementType {
  MINIMUM_AMOUNT
  MINIMUM_ITEMS
}

"""
A discount is a way to apply price discounts to your customer orders via a code or automatic rules.
"""
type Discount implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """
  Indicates if the discount is applied via a code or automatically.
  """
  applicationMode: DiscountApplicationMode!
  """
  A human friendly unique identifier for the discount. could be used as a code or title.
  """
  handle: String!
  """
  Indicates if the discount is applied as a percentage or a fixed amount.
  """
  discountValueType: DiscountValueType!
  """
  the value that will be subtracted from the order total. (percentage or fixed amount)
  """
  discountValue: Int!
  """
  Define the type of the discount.
  Order: discount will be applied to the order total.
  Product: discount will be applied to the product price.
  Shipping: discount will be applied to the shipping cost.
  BuyXGetY: discount will be applied to the product price.
  """
  type: DiscountType!
  """
  The maximum number of times the discount can be used by a customer.
  """
  perCustomerLimit: Int
  """
  Date when the discount starts to be applicable.
  """
  startsAt: Date!
  """
  Date when the discount stops to be applicable.
  """
  endsAt: Date
  """
  Whether the discount is enabled or not. Disabled discounts can't be applied to orders.
  """
  enabled: Boolean!
  """
  Define the requirements that the order must meet to be eligible for the discount.
  """
  orderRequirementType: OrderRequirementType
  """
  The value that the order must meet to be eligible for the discount. (minimum amount or minimum items)
  """
  orderRequirementValue: Int
  """
  List of available combinations for the discount.
  """
  availableCombinations: [DiscountType!]
  """
  Extra metadata needed for the discount.
  """
  metadata: JSON
}

type Query {
  discounts(input: DiscountListInput): DiscountList!
  discount(id: ID!): Discount
}

type Mutation {
  createDiscount(input: CreateDiscountInput!): DiscountResult!
  updateDiscount(id: ID!, input: UpdateDiscountInput!): DiscountResult!
  removeDiscounts(ids: [ID!]!): Boolean
}

input CreateDiscountInput {
  applicationMode: DiscountApplicationMode!
  handle: String!
  discountValueType: DiscountValueType!
  discountValue: Int!
  type: DiscountType!
  perCustomerLimit: Int
  startsAt: Date!
  endsAt: Date
  enabled: Boolean
  orderRequirementType: OrderRequirementType
  orderRequirementValue: Int
  availableCombinations: [DiscountType!]
  metadata: JSON
}

input UpdateDiscountInput {
  handle: String
  discountValueType: DiscountValueType
  discountValue: Int
  type: DiscountType
  perCustomerLimit: Int
  startsAt: Date
  endsAt: Date
  enabled: Boolean
  orderRequirementType: OrderRequirementType
  orderRequirementValue: Int
  availableCombinations: [DiscountType!]
  metadata: JSON
}

type DiscountList implements List {
  items: [Discount!]!
  count: Int!
  pageInfo: PageInfo!
}

input DiscountListInput {
  """
  Skip the first n results
  """
  skip: Int

  """
  takes n result from where the skip position is
  """
  take: Int

  """
  Filters to apply
  """
  filters: DiscountFilters
}

input DiscountFilters {
  handle: StringFilter
}

type DiscountResult {
  discount: Discount
  apiErrors: [DiscountErrorResult!]!
}

type DiscountErrorResult {
  code: DiscountErrorCode!
  message: String!
}

enum DiscountErrorCode {
  HANDLE_ALREADY_EXISTS
}
